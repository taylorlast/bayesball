'alpha[4]' = levels(team_list)[4],
'alpha[5]' = levels(team_list)[5],
'alpha[6]' = levels(team_list)[6],
'alpha[7]' = levels(team_list)[7],
'alpha[8]' = levels(team_list)[8],
'alpha[9]' = levels(team_list)[9],
'alpha[10]' = levels(team_list)[10],
'alpha[11]' = levels(team_list)[11],
'alpha[12]' = levels(team_list)[12],
'alpha[13]' = levels(team_list)[13],
'alpha[14]' = levels(team_list)[14],
'alpha[15]' = levels(team_list)[15],
'alpha[16]' = levels(team_list)[16],
'alpha[17]' = levels(team_list)[17],
'alpha[18]' = levels(team_list)[18],
'alpha[19]' = levels(team_list)[19],
'alpha[20]' = levels(team_list)[20],
'alpha[21]' = levels(team_list)[21],
'alpha[22]' = levels(team_list)[22],
'alpha[23]' = levels(team_list)[23],
'alpha[24]' = levels(team_list)[24],
'alpha[25]' = levels(team_list)[25],
'alpha[26]' = levels(team_list)[26],
'alpha[27]' = levels(team_list)[27],
'alpha[28]' = levels(team_list)[28],
'alpha[29]' = levels(team_list)[29],
'alpha[30]' = levels(team_list)[30]),
limits = c(temp_vec)
)
for(i in 1:n.teams){
for(j in 1:n.teams){
if (avg.rank[j] == i){
ranked_teams_idx[i]<- teams_df[j,1]
}
}
}
ranked_teams_idx = vector()
for(i in 1:n.teams){
for(j in 1:n.teams){
if (avg.rank[j] == i){
ranked_teams_idx[i]<- teams_df[j,1]
}
}
}
ranked_teams_idx
for(i in 1:n.teams){
temp_vec[i] = paste0('alpha[',ranked_teams_idx[i],']')
}
temp_vec
trimws(ranked_teams_idx)
ranked_teams_idx
ranked_teams_idx = vector()
for(i in 1:n.teams){
for(j in 1:n.teams){
if (avg.rank[j] == i){
ranked_teams_idx[i]<- teams_df[j,1]
}
}
}
ranked_teams_idx = trimws(ranked_teams_idx)
# Sorted Alphas
temp_vec=vector()
for(i in 1:n.teams){
temp_vec[i] = paste0('alpha[',ranked_teams_idx[i],']')
}
temp_vec
mcmc_intervals(codaSamples,regex_pars = '^[alpha]')+
scale_y_discrete(
labels =
c('alpha[1]' = levels(team_list)[1],
'alpha[2]' = levels(team_list)[2],
'alpha[3]' = levels(team_list)[3],
'alpha[4]' = levels(team_list)[4],
'alpha[5]' = levels(team_list)[5],
'alpha[6]' = levels(team_list)[6],
'alpha[7]' = levels(team_list)[7],
'alpha[8]' = levels(team_list)[8],
'alpha[9]' = levels(team_list)[9],
'alpha[10]' = levels(team_list)[10],
'alpha[11]' = levels(team_list)[11],
'alpha[12]' = levels(team_list)[12],
'alpha[13]' = levels(team_list)[13],
'alpha[14]' = levels(team_list)[14],
'alpha[15]' = levels(team_list)[15],
'alpha[16]' = levels(team_list)[16],
'alpha[17]' = levels(team_list)[17],
'alpha[18]' = levels(team_list)[18],
'alpha[19]' = levels(team_list)[19],
'alpha[20]' = levels(team_list)[20],
'alpha[21]' = levels(team_list)[21],
'alpha[22]' = levels(team_list)[22],
'alpha[23]' = levels(team_list)[23],
'alpha[24]' = levels(team_list)[24],
'alpha[25]' = levels(team_list)[25],
'alpha[26]' = levels(team_list)[26],
'alpha[27]' = levels(team_list)[27],
'alpha[28]' = levels(team_list)[28],
'alpha[29]' = levels(team_list)[29],
'alpha[30]' = levels(team_list)[30]),
limits = c(temp_vec)
)
# Plot the alphas to see random effects
mcmc_intervals(codaSamples,regex_pars = '^[alpha]')+
scale_y_discrete(
labels =
c('alpha[1]' = levels(team_list)[1],
'alpha[2]' = levels(team_list)[2],
'alpha[3]' = levels(team_list)[3],
'alpha[4]' = levels(team_list)[4],
'alpha[5]' = levels(team_list)[5],
'alpha[6]' = levels(team_list)[6],
'alpha[7]' = levels(team_list)[7],
'alpha[8]' = levels(team_list)[8],
'alpha[9]' = levels(team_list)[9],
'alpha[10]' = levels(team_list)[10],
'alpha[11]' = levels(team_list)[11],
'alpha[12]' = levels(team_list)[12],
'alpha[13]' = levels(team_list)[13],
'alpha[14]' = levels(team_list)[14],
'alpha[15]' = levels(team_list)[15],
'alpha[16]' = levels(team_list)[16],
'alpha[17]' = levels(team_list)[17],
'alpha[18]' = levels(team_list)[18],
'alpha[19]' = levels(team_list)[19],
'alpha[20]' = levels(team_list)[20],
'alpha[21]' = levels(team_list)[21],
'alpha[22]' = levels(team_list)[22],
'alpha[23]' = levels(team_list)[23],
'alpha[24]' = levels(team_list)[24],
'alpha[25]' = levels(team_list)[25],
'alpha[26]' = levels(team_list)[26],
'alpha[27]' = levels(team_list)[27],
'alpha[28]' = levels(team_list)[28],
'alpha[29]' = levels(team_list)[29],
'alpha[30]' = levels(team_list)[30]),
limits = c(temp_vec)
)+
title('MLB teams random effects')
# Plot the alphas to see random effects
mcmc_intervals(codaSamples,regex_pars = '^[alpha]')+
scale_y_discrete(
labels =
c('alpha[1]' = levels(team_list)[1],
'alpha[2]' = levels(team_list)[2],
'alpha[3]' = levels(team_list)[3],
'alpha[4]' = levels(team_list)[4],
'alpha[5]' = levels(team_list)[5],
'alpha[6]' = levels(team_list)[6],
'alpha[7]' = levels(team_list)[7],
'alpha[8]' = levels(team_list)[8],
'alpha[9]' = levels(team_list)[9],
'alpha[10]' = levels(team_list)[10],
'alpha[11]' = levels(team_list)[11],
'alpha[12]' = levels(team_list)[12],
'alpha[13]' = levels(team_list)[13],
'alpha[14]' = levels(team_list)[14],
'alpha[15]' = levels(team_list)[15],
'alpha[16]' = levels(team_list)[16],
'alpha[17]' = levels(team_list)[17],
'alpha[18]' = levels(team_list)[18],
'alpha[19]' = levels(team_list)[19],
'alpha[20]' = levels(team_list)[20],
'alpha[21]' = levels(team_list)[21],
'alpha[22]' = levels(team_list)[22],
'alpha[23]' = levels(team_list)[23],
'alpha[24]' = levels(team_list)[24],
'alpha[25]' = levels(team_list)[25],
'alpha[26]' = levels(team_list)[26],
'alpha[27]' = levels(team_list)[27],
'alpha[28]' = levels(team_list)[28],
'alpha[29]' = levels(team_list)[29],
'alpha[30]' = levels(team_list)[30]),
limits = c(temp_vec)
)+
ggtitle('MLB teams random effects')
# Plot the alphas to see random effects
mcmc_intervals(codaSamples,regex_pars = '^[alpha]')+
scale_y_discrete(
labels =
c('alpha[1]' = levels(team_list)[1],
'alpha[2]' = levels(team_list)[2],
'alpha[3]' = levels(team_list)[3],
'alpha[4]' = levels(team_list)[4],
'alpha[5]' = levels(team_list)[5],
'alpha[6]' = levels(team_list)[6],
'alpha[7]' = levels(team_list)[7],
'alpha[8]' = levels(team_list)[8],
'alpha[9]' = levels(team_list)[9],
'alpha[10]' = levels(team_list)[10],
'alpha[11]' = levels(team_list)[11],
'alpha[12]' = levels(team_list)[12],
'alpha[13]' = levels(team_list)[13],
'alpha[14]' = levels(team_list)[14],
'alpha[15]' = levels(team_list)[15],
'alpha[16]' = levels(team_list)[16],
'alpha[17]' = levels(team_list)[17],
'alpha[18]' = levels(team_list)[18],
'alpha[19]' = levels(team_list)[19],
'alpha[20]' = levels(team_list)[20],
'alpha[21]' = levels(team_list)[21],
'alpha[22]' = levels(team_list)[22],
'alpha[23]' = levels(team_list)[23],
'alpha[24]' = levels(team_list)[24],
'alpha[25]' = levels(team_list)[25],
'alpha[26]' = levels(team_list)[26],
'alpha[27]' = levels(team_list)[27],
'alpha[28]' = levels(team_list)[28],
'alpha[29]' = levels(team_list)[29],
'alpha[30]' = levels(team_list)[30]),
limits = c(temp_vec)
)+
ggtitle('MLB teams random effects')+
plot.title = element_text(hjust = 0.5)
# Plot the alphas to see random effects
mcmc_intervals(codaSamples,regex_pars = '^[alpha]')+
scale_y_discrete(
labels =
c('alpha[1]' = levels(team_list)[1],
'alpha[2]' = levels(team_list)[2],
'alpha[3]' = levels(team_list)[3],
'alpha[4]' = levels(team_list)[4],
'alpha[5]' = levels(team_list)[5],
'alpha[6]' = levels(team_list)[6],
'alpha[7]' = levels(team_list)[7],
'alpha[8]' = levels(team_list)[8],
'alpha[9]' = levels(team_list)[9],
'alpha[10]' = levels(team_list)[10],
'alpha[11]' = levels(team_list)[11],
'alpha[12]' = levels(team_list)[12],
'alpha[13]' = levels(team_list)[13],
'alpha[14]' = levels(team_list)[14],
'alpha[15]' = levels(team_list)[15],
'alpha[16]' = levels(team_list)[16],
'alpha[17]' = levels(team_list)[17],
'alpha[18]' = levels(team_list)[18],
'alpha[19]' = levels(team_list)[19],
'alpha[20]' = levels(team_list)[20],
'alpha[21]' = levels(team_list)[21],
'alpha[22]' = levels(team_list)[22],
'alpha[23]' = levels(team_list)[23],
'alpha[24]' = levels(team_list)[24],
'alpha[25]' = levels(team_list)[25],
'alpha[26]' = levels(team_list)[26],
'alpha[27]' = levels(team_list)[27],
'alpha[28]' = levels(team_list)[28],
'alpha[29]' = levels(team_list)[29],
'alpha[30]' = levels(team_list)[30]),
limits = c(temp_vec)
)+
ggtitle('MLB teams random effects')+
theme(plot.title = element_text(hjust = 0.5))
# Posterior for intraclass correlation
plot(codaSamples[,40])
era.xera = read.csv('era_vs_expected.csv')
era.xera
boxplot(era.xera$Team ~ era.xera$diff)
plot(era.xera$Team ~ era.xera$diff)
plot(x = era.xera$Team,y = era.xera$diff)
era.xera$diff
bar(x = era.xera$Team,y = era.xera$diff)
barplot(x = era.xera$Team,y = era.xera$diff)
?barplot
barplotera.xera$diff)
barplot(era.xera$diff)
era.xera
barplot(era.xera$diff, xlim = era.xera$Team)
ggplot(data = era.xera, aes(x = Team,y=diff))+
geom_bar()
ggplot(data = era.xera, aes(y=diff))+
geom_bar()
ggplot(data = era.xera, aes(x = Team,y=diff))+
geom_bar(stat='identity')
sort(era.xera)
era.xera[order(diff),]
order(diff)
era.xera[order(era.xera$diff),]
era.xera = era.xera[order(era.xera$diff),]
ggplot(data = era.xera, aes(x = Team,y=diff))+
geom_bar(stat='identity')
era.xera
era.xera = read.csv('era_vs_expected.csv')
era.xera = era.xera[order(era.xera$diff),]
ggplot(data = era.xera, aes(x = Team,y=diff))+
geom_bar(stat='identity')
era.xera$Team <- factor(era.xera$Team, levels = era.xera$Team[order(era.xera$diff)])
ggplot(data = era.xera, aes(x = Team,y=diff))+
geom_bar(stat='identity')
ggplot(data = era.xera, aes(x = Team,y=diff))+
geom_bar(stat='identity')+
cord_flip
ggplot(data = era.xera, aes(x = Team,y=diff))+
geom_bar(stat='identity')+
coord_flip()
ggplot(data = era.xera, aes(x = Team,y=diff))+
geom_bar(stat='identity')+
coord_flip()+
title('ERA - xERA from FanGraphs')+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = era.xera, aes(x = Team,y=diff))+
geom_bar(stat='identity')+
coord_flip()+
ggtitle('ERA - xERA from FanGraphs')+
theme(plot.title = element_text(hjust = 0.5))
fip.xfip = read.csv('FIP_vs_xFIP.csv')
fip.xfip = fip.xfip[order(fip.xfip$diff),]
fip.xfip$Team <- factor(fip.xfip$Team, levels = fip.xfip$Team[order(fip.xfip$diff)])
ggplot(data = fip.xfip, aes(x = Team,y=diff))+
geom_bar(stat='identity')+
coord_flip()+
ggtitle('FIP-  -  xFIP- from FanGraphs')+
theme(plot.title = element_text(hjust = 0.5))
# Boxplot of posteriors for beta
boxplot(mcmcChain[,31:38], main = "Posterior samples of beta",
names=c("Intercept",
"HR9",
"BABIP",
"LOB",
"WAR",
"KBB",
"WHIP",
"WIN"))
abline(h = 0, lty = 2, col="red")
# 50% (thin line) and 95% (thick line) credible interval "caterpillar" plots
# dot is the posterior median
MCMCplot(codaSamples, params = "beta",
main = "Posterior CIs for beta", ref = NULL)
# 50% (thin line) and 95% (thick line) credible interval "caterpillar" plots
# dot is the posterior median
MCMCplot(codaSamples, params = "beta",
main = "Posterior CIs for beta")
p
ceiling((numSavedSteps*thinSteps)/nChains)
# Boxplot of posteriors for beta
boxplot(mcmcChain[,31:38], main = "Posterior samples of beta",
names=c("Intercept",
"HR9",
"BABIP",
"LOB",
"WAR",
"KBB",
"WHIP",
"WIN"))
abline(h = 0, lty = 2, col="red")
# 50% (thin line) and 95% (thick line) credible interval "caterpillar" plots
# dot is the posterior median
MCMCplot(codaSamples, params = "beta",
main = "Posterior CIs for beta")
# Posterior for intraclass correlation
plot(codaSamples[,40])
# Posterior for intraclass correlation
plot(codaSamples[,40])
mean(codaSamples[,40])
mean(codaSamples[,40])
codaSamples[,40]
mean(codaSamples[,40][1])
codaSamples[,40][1]
codaSamples[,40][[1]]
mean(codaSamples[,40][[1]])
# Posterior for intraclass correlation
plot(codaSamples[,40])
codaSamples
codaSamples[,40]
# Posterior for intraclass correlation
plot(codaSamples[,41])
# Posterior for intraclass correlation
plot(codaSamples[,42])
# Posterior for intraclass correlation
plot(codaSamples[,41])
codaSamples[,41]
# Posterior for intraclass correlation
plot(codaSamples[,39])
codaSamples[,39]
# Posterior for intraclass correlation
plot(codaSamples[,39])
mean(codaSamples[,39][[1]])
MCMCplot(codaSamples, params = "sigma",
main = "Posterior CIs for beta")
MCMCplot(codaSamples, params = "sig",
main = "Posterior CIs for beta")
MCMCplot(codaSamples, params = "sig2",
main = "Posterior CIs for beta")
MCMCplot(codaSamples, params = c("sig2",'sig2.alpha')
main = "Posterior CIs for beta")
MCMCplot(codaSamples, params = c("sig2",'sig2.alpha'),
main = "Posterior CIs for beta")
## (10) Retrieve posterior samples for later use
mcmcChain <- as.matrix(codaSamples)
library(MCMCvis)
MCMCtrace(codaSamples,ISB = FALSE ,
exact = TRUE,
pdf = FALSE)
# Examine the posterior distribution of the team random effect
alphaSamples <- matrix(NA, dim(mcmcChain)[1], n.teams)
for(i in 1:n.teams){
alphaSamples[,i]  <- mcmcChain[, paste("alpha[",i,"]", sep="")]
}
# Examine the posterior distribution of the team random effect
alphaSamples <- matrix(NA, dim(mcmcChain)[1], n.teams)
for(i in 1:n.teams){
alphaSamples[,i]  <- mcmcChain[, paste("alpha[",i,"]", sep="")]
}
levels(team_list)
par(mfrow=c(1,1), ask=F)
boxplot(as.data.frame(alphaSamples),
names=as.character(1:n.teams),
main="Posterior samples of alphas",
xlab="Team")
abline(h=0)
teams_df = as.matrix(data.frame(num = c(1:30),team = sort(unique(Team))))
rank.alpha <- matrix(NA, dim(mcmcChain)[1], n.teams)
for(i in 1:dim(mcmcChain)[1]){
rank.alpha[i,] <- rank(alphaSamples[i,])
}
avg.rank <- rank(apply(rank.alpha, 2, mean))
ranked_teams_idx = vector()
for(i in 1:n.teams){
for(j in 1:n.teams){
if (avg.rank[j] == i){
ranked_teams_idx[i]<- teams_df[j,1]
}
}
}
ranked_teams_idx = trimws(ranked_teams_idx)
# Sorted Alphas
temp_vec=vector()
for(i in 1:n.teams){
temp_vec[i] = paste0('alpha[',ranked_teams_idx[i],']')
}
library(bayesplot)
# Plot the alphas to see random effects
mcmc_intervals(codaSamples,regex_pars = '^[alpha]')+
scale_y_discrete(
labels =
c('alpha[1]' = levels(team_list)[1],
'alpha[2]' = levels(team_list)[2],
'alpha[3]' = levels(team_list)[3],
'alpha[4]' = levels(team_list)[4],
'alpha[5]' = levels(team_list)[5],
'alpha[6]' = levels(team_list)[6],
'alpha[7]' = levels(team_list)[7],
'alpha[8]' = levels(team_list)[8],
'alpha[9]' = levels(team_list)[9],
'alpha[10]' = levels(team_list)[10],
'alpha[11]' = levels(team_list)[11],
'alpha[12]' = levels(team_list)[12],
'alpha[13]' = levels(team_list)[13],
'alpha[14]' = levels(team_list)[14],
'alpha[15]' = levels(team_list)[15],
'alpha[16]' = levels(team_list)[16],
'alpha[17]' = levels(team_list)[17],
'alpha[18]' = levels(team_list)[18],
'alpha[19]' = levels(team_list)[19],
'alpha[20]' = levels(team_list)[20],
'alpha[21]' = levels(team_list)[21],
'alpha[22]' = levels(team_list)[22],
'alpha[23]' = levels(team_list)[23],
'alpha[24]' = levels(team_list)[24],
'alpha[25]' = levels(team_list)[25],
'alpha[26]' = levels(team_list)[26],
'alpha[27]' = levels(team_list)[27],
'alpha[28]' = levels(team_list)[28],
'alpha[29]' = levels(team_list)[29],
'alpha[30]' = levels(team_list)[30]),
limits = c(temp_vec)
)+
ggtitle('MLB teams random effects')+
theme(plot.title = element_text(hjust = 0.5))
codaSamples[,1]
codaSamples
mcmcChain
temp_vec
mean(mcmcChain[,39])
mean(mcmcChain[,3])
mean(mcmcChain[,9])
## (9) Calculate numerical summaries for the posterior samples
summary(codaSamples)
mean(mcmcChain[,37])
median(mcmcChain[,37])
median(mcmcChain[,35])
mean(mcmcChain[,35])
mean(mcmcChain[,3])
mean(mcmcChain[,9])
mean(mcmcChain[,39])
median(mcmcChain[,39])
MCMCplot(codaSamples, params = c("sig2",'sig2.alpha'),
main = "Posterior CIs for sigmas")
fip.xfip = read.csv('FIP_vs_xFIP.csv')
fip.xfip = fip.xfip[order(fip.xfip$diff),]
fip.xfip$Team <- factor(fip.xfip$Team, levels = fip.xfip$Team[order(fip.xfip$diff)])
ggplot(data = fip.xfip, aes(x = Team,y=diff))+
geom_bar(stat='identity')+
coord_flip()+
ggtitle('FIP-  -  xFIP- from FanGraphs')+
theme(plot.title = element_text(hjust = 0.5))
# Boxplot of posteriors for beta
boxplot(mcmcChain[,31:38], main = "Posterior samples of beta",
names=c("Intercept",
"HR9",
"BABIP",
"LOB",
"WAR",
"KBB",
"WHIP",
"WIN"))
ggplot(data = fip.xfip, aes(x = Team,y=diff))+
geom_bar(stat='identity')+
coord_flip()+
ggtitle('FIP-  -  xFIP- from FanGraphs')+
theme(plot.title = element_text(hjust = 0.5))
library(knitr)
knitr::stitch('FinalRFile_4350.R')
knitr::stitch('FinalRFile_4350.r')
